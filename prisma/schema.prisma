// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model User {
  id              String       @id @default(cuid())
  name            String?
  email           String?      @unique
  emailVerified   DateTime?
  password        String?
  image           String?
  accounts        Account[]
  sessions        Session[]
  restos          UserResto[]
  referrers       Invitation[] @relation("referrer")
  refereds        Invitation[] @relation("referred")
  Panier          Panier[]
  selectedRestoId String?

  selectedResto Resto? @relation(fields: [selectedRestoId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([identifier, token])
}

model Invitation {
  id         String @id @default(cuid())
  status     String
  referrerId String
  referredId String
  restoId    String

  referrer User  @relation("referrer", fields: [referrerId], references: [id])
  referred User  @relation("referred", fields: [referredId], references: [id])
  resto    Resto @relation(fields: [restoId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Resto {
  id            String       @id @default(cuid())
  name          String       @unique
  users         UserResto[]
  categories    Category[]
  dishes        Dish[]
  invitations   Invitation[]
  selectedUsers User[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model UserResto {
  userId  String
  restoId String
  role    role

  user  User  @relation(fields: [userId], references: [id])
  resto Resto @relation(fields: [restoId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@id([userId, restoId])
}

model Category {
  id      String  @id @default(cuid())
  name    String
  type    String
  image   String?
  color   String?
  restoId String
  dishes  Dish[]

  resto Resto @relation(fields: [restoId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Dish {
  id          String        @id @default(cuid())
  name        String
  price       Float
  image       String?       @db.Text
  description String?       @db.Text
  restoId     String
  categoryId  String
  LignePanier LignePanier[]

  resto    Resto    @relation(fields: [restoId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Panier {
  id          String        @id @default(cuid())
  active      Boolean
  userId      String
  LignePanier LignePanier[]

  user User @relation(fields: [userId], references: [id])
}

model LignePanier {
  id           String  @id @default(cuid())
  quantity     Int
  total        Float
  informations String? @db.Text
  dishId       String
  panierId     String

  dish   Dish   @relation(fields: [dishId], references: [id])
  panier Panier @relation(fields: [panierId], references: [id])
}

enum role {
  waiter
  chef
  admin
  superAdmin
}
